;(function(e,t,n){function i(n,s){if(!t[n]){if(!e[n]){var o=typeof require=="function"&&require;if(!s&&o)return o(n,!0);if(r)return r(n,!0);throw new Error("Cannot find module '"+n+"'")}var u=t[n]={exports:{}};e[n][0].call(u.exports,function(t){var r=e[n][1][t];return i(r?r:t)},u,u.exports)}return t[n].exports}var r=typeof require=="function"&&require;for(var s=0;s<n.length;s++)i(n[s]);return i})({1:[function(require,module,exports){
// Generated by CoffeeScript 1.6.1
(function() {
  var Game, app, bind, clickables, db, device, init, loadViews, onDeviceReady, viewRoutes;

  Game = require('./controllers/Game').Game;

  device = require('./core/device');

  clickables = require('./ui/clickables');

  db = require('./controllers/db');

  viewRoutes = {
    main: require('./views/main')
  };

  module.exports = app = window.app = {
    renderer: require('./core/renderer').initialise(),
    views: require('./core/views')
  };

  init = function() {
    loadViews();
    if (device.get('type') != null) {
      return bind();
    } else {
      return onDeviceReady();
    }
  };

  loadViews = function() {
    var id, ns, view, views, _results;
    _results = [];
    for (ns in viewRoutes) {
      views = viewRoutes[ns];
      _results.push((function() {
        var _results1;
        _results1 = [];
        for (id in views) {
          view = views[id];
          _results1.push(app.views.load("" + ns + "." + id, view));
        }
        return _results1;
      })());
    }
    return _results;
  };

  bind = function() {
    return document.addEventListener('deviceready', onDeviceReady, false);
  };

  onDeviceReady = function() {
    var view;
    clickables.initialise();
    db.initialise();
    return view = app.views.open('main.index');
  };

  init();

}).call(this);

},{"./controllers/Game":2,"./core/device":3,"./ui/clickables":4,"./controllers/db":5,"./views/main":6,"./core/renderer":7,"./core/views":8}],3:[function(require,module,exports){
// Generated by CoffeeScript 1.6.1
(function() {
  var device, onResize;

  device = {
    type: window.navigator.userAgent.match(/(iPhone|iPod|iPad|Android|BlackBerry)/),
    size: null,
    clickEvent: null
  };

  device.clickEvent = device.type != null ? 'touchend' : 'click';

  onResize = function() {
    return device.size = {
      width: $(window).innerWidth(),
      height: $(window).innerHeight()
    };
  };

  $(window).on('resize', onResize);

  onResize();

  module.exports = {
    get: function(prop) {
      switch (prop) {
        case 'type':
          return device.type;
        case 'size':
          return device.size;
        case 'clickEvent':
          return device.clickEvent;
        case 'center':
          return {
            x: device.size.width / 2,
            y: device.size.height / 2
          };
      }
    }
  };

}).call(this);

},{}],5:[function(require,module,exports){
// Generated by CoffeeScript 1.6.1
(function() {

  module.exports = {
    initialise: function() {
      var _this = this;
      this.db = window.openDatabase("diary", 1, "diary", 1000000);
      return this.db.transaction(function(t) {
        return t.executeSql('create table if not exists digits(' + 'id INTEGER PRIMARY KEY AUTOINCREMENT, value TEXT' + ')');
      }, this.onError);
    },
    onError: function(e) {
      return console.log('DB ERROR:', e);
    },
    getAll: function(callback) {
      var _this = this;
      return this.db.transaction(function(t) {
        return t.executeSql('select * from digits order by id desc', [], function(t, results) {
          return callback(_this.fixResults(results));
        }, _this.onError);
      }, this.onError);
    },
    save: function(digits, callback) {
      var _this = this;
      return this.db.transaction(function(t) {
        return t.executeSql('insert into digits(value) values(?)', [digits], function() {
          if (callback) {
            return callback();
          }
        }, _this.onError);
      }, this.onError);
    },
    fixResults: function(res) {
      var i, item, result, row, _i, _len, _ref;
      result = [];
      _ref = res.rows;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        item = _ref[i];
        row = res.rows.item(i);
        result.push(row);
      }
      return result;
    }
  };

}).call(this);

},{}],2:[function(require,module,exports){
// Generated by CoffeeScript 1.6.1
(function() {
  var Game, Orb, attractionRange, defaults, detractionRange, device, geo,
    _this = this;

  geo = require('../helpers/geometry');

  device = require('../core/device');

  Orb = require('./Orb').Orb;

  detractionRange = 30;

  attractionRange = 60;

  defaults = {
    orbsCount: 6
  };

  Game = (function() {

    function Game(options) {
      var _this = this;
      this.getInitialVector = function(index) {
        return Game.prototype.getInitialVector.apply(_this, arguments);
      };
      this.getRelativeVector = function(orb, target) {
        return Game.prototype.getRelativeVector.apply(_this, arguments);
      };
      this.applyForces = function() {
        return Game.prototype.applyForces.apply(_this, arguments);
      };
      this.resetPositions = function() {
        return Game.prototype.resetPositions.apply(_this, arguments);
      };
      this.generateOrbs = function() {
        return Game.prototype.generateOrbs.apply(_this, arguments);
      };
      options = $.extend(true, {}, defaults, options);
      this.display = options.display;
      this.orbsCount = options.orbsCount;
      this.orbs = [];
      this.generateOrbs();
      this.applyForces();
      this.bind();
    }

    Game.prototype.bind = function() {
      var self;
      self = this;
      return this.display.on(device.get('clickEvent'), '[data-role="orb"]', function() {
        $(this).data('orb').switchState();
        return self.applyForces();
      });
    };

    Game.prototype.generateOrbs = function() {
      var i, orb, _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = this.orbsCount - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        orb = new Orb(0, 0);
        this.orbs.push(orb);
        _results.push(this.display.append(orb.element));
      }
      return _results;
    };

    Game.prototype.resetPositions = function() {
      var i, orb, _i, _len, _ref, _results;
      _ref = this.orbs;
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        orb = _ref[i];
        orb.x = 0;
        orb.y = 0;
        orb.applyVector(this.getInitialVector(i));
        _results.push(orb.update(true));
      }
      return _results;
    };

    Game.prototype.applyForces = function() {
      var i, orb, relativeVector, summedVectors, target, vectors, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _results;
      summedVectors = [];
      this.resetPositions();
      _ref = this.orbs;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        orb = _ref[_i];
        vectors = [];
        _ref1 = this.orbs;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          target = _ref1[_j];
          if (target !== orb) {
            relativeVector = this.getRelativeVector(orb, target);
            if (relativeVector != null) {
              vectors.push(relativeVector);
            }
          }
        }
        summedVectors.push(geo.sumVectors(vectors));
      }
      _ref2 = this.orbs;
      _results = [];
      for (i = _k = 0, _len2 = _ref2.length; _k < _len2; i = ++_k) {
        orb = _ref2[i];
        orb.applyVector(summedVectors[i]);
        _results.push(orb.update());
      }
      return _results;
    };

    Game.prototype.getRelativeVector = function(orb, target) {
      var angleDeg, angleRad, dist, force;
      dist = geo.getDistance(target, orb);
      force = null;
      if (target.getState() === 'attractor' && dist < attractionRange) {
        force = (dist - attractionRange) / 2;
        angleRad = Math.atan2(orb.y - target.y, orb.x - target.x);
      } else if (target.getState() === 'detractor' && dist < detractionRange) {
        force = (dist - detractionRange) / 2;
        angleRad = Math.atan2(target.y - orb.y, target.x - orb.x);
      }
      if (force != null) {
        angleDeg = geo.radToDeg(angleRad);
        return geo.degToVector(angleDeg, force);
      }
      return null;
    };

    Game.prototype.getInitialVector = function(index) {
      var deg, vector;
      deg = (360 / this.orbsCount) * index;
      vector = geo.degToVector(deg, 5);
      return vector;
    };

    return Game;

  })();

  module.exports = {
    Game: Game
  };

}).call(this);

},{"../helpers/geometry":9,"../core/device":3,"./Orb":10}],4:[function(require,module,exports){
// Generated by CoffeeScript 1.6.1
(function() {
  var activeStateDuration, classNames, clickables, device;

  device = require('../core/device');

  clickables = 'a, .button, button, input, .touchable, .clickable';

  classNames = {
    touchActive: 'touch-active'
  };

  activeStateDuration = 200;

  module.exports = {
    initialise: function() {
      return this.bind();
    },
    bind: function() {
      var self;
      self = this;
      return $('body').on(device.get('clickEvent'), clickables, function() {
        return self.onClick($(this));
      });
    },
    onClick: function(element) {
      var _this = this;
      element.addClass(classNames.touchActive);
      return element.data('touchActiveTimer', setTimeout(function() {
        element.removeClass(classNames.touchActive);
        if (element.data('touchActiveTimer') != null) {
          return clearTimeout(element.data('touchActiveTimer'));
        }
      }, activeStateDuration));
    }
  };

}).call(this);

},{"../core/device":3}],6:[function(require,module,exports){
// Generated by CoffeeScript 1.6.1
(function() {
  var BaseView, HomeView, ResultView, db, device, generateDigitCtx, generateValCtx, getByRole, map, renderer, views, vowels,
    _this = this,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  getByRole = require('../helpers/dom').getByRole;

  BaseView = require('../core/View').BaseView;

  device = require('../core/device');

  renderer = require('../core/renderer');

  views = require('../core/views');

  map = require('../fixtures/map');

  db = require('../controllers/db');

  vowels = ['a', 'e', 'i', 'o', 'u'];

  HomeView = (function(_super) {

    __extends(HomeView, _super);

    HomeView.prototype.templateName = 'home';

    function HomeView() {
      var _this = this;
      this.submit = function() {
        return HomeView.prototype.submit.apply(_this, arguments);
      };
      this.bind = function() {
        return HomeView.prototype.bind.apply(_this, arguments);
      };
      this.getElements = function() {
        return HomeView.prototype.getElements.apply(_this, arguments);
      };
    }

    HomeView.prototype.getElements = function() {
      HomeView.__super__.getElements.call(this);
      this.elements.form = this.elements.main.find('form');
      this.elements.input = getByRole('digit-input', this.elements.form);
      this.elements.button = this.elements.form.find('button');
      return this.elements.savedWrap = getByRole('saved-wrap', this.elements.main);
    };

    HomeView.prototype.bind = function() {
      var scrolling, self;
      HomeView.__super__.bind.call(this);
      self = this;
      this.elements.input.on('keydown', function(e) {
        var charCode, isAllowed, isNumber;
        charCode = e.which ? e.which : e.keyCode;
        isNumber = (charCode >= 48 && charCode <= 57) || charCode === 43;
        isAllowed = charCode === 8 || charCode === 13;
        if (!isNumber && !isAllowed) {
          return false;
        }
      });
      this.elements.input.on('change', function() {
        return self.submit();
      });
      this.elements.form.on('submit', function() {
        return false;
      });
      this.elements.button.on(device.get('clickEvent'), function() {
        self.submit();
        return false;
      });
      db.getAll(function(data) {
        var ctx, entry, savedList, _i, _len;
        ctx = [];
        for (_i = 0, _len = data.length; _i < _len; _i++) {
          entry = data[_i];
          ctx.push(generateDigitCtx(entry.value));
        }
        savedList = $(renderer.render('partials/saved-list', {
          entries: ctx
        }));
        return self.elements.savedWrap.append(savedList);
      });
      scrolling = null;
      this.elements.main.on('touchmove', '[data-role="saved-digits"]', function(e) {
        return scrolling = true;
      });
      this.elements.main.on('touchstart', '[data-role="saved-digits"]', function(e) {
        scrolling = false;
        return null;
      });
      return this.elements.main.on('touchend', '[data-role="saved-digits"]', function(e) {
        var digits;
        if (!scrolling) {
          digits = $(this).attr('data-digits');
          views.open('main.result', 'slide-right', null, false, digits);
        }
        scrolling = false;
        return true;
      });
    };

    HomeView.prototype.submit = function() {
      var digits;
      digits = this.elements.input.val();
      views.open('main.result', 'slide-right', null, false, digits);
      return db.save(digits);
    };

    return HomeView;

  })(BaseView);

  ResultView = (function(_super) {

    __extends(ResultView, _super);

    ResultView.prototype.templateName = 'result';

    ResultView.prototype.fixHeight = true;

    ResultView.prototype.classNames = 'view-results';

    ResultView.prototype.getElements = function() {
      ResultView.__super__.getElements.call(this);
      return this.elements.back = getByRole('back', this.elements.main);
    };

    function ResultView(digits) {
      var pairContexts,
        _this = this;
      this.bind = function() {
        return ResultView.prototype.bind.apply(_this, arguments);
      };
      this.getElements = function() {
        return ResultView.prototype.getElements.apply(_this, arguments);
      };
      pairContexts = generateDigitCtx(digits);
      $.extend(this.context, pairContexts);
    }

    ResultView.prototype.bind = function() {
      ResultView.__super__.bind.call(this);
      return this.elements.back.on(device.get('clickEvent'), function() {
        return app.views.open('main.index', 'slide-left');
      });
    };

    return ResultView;

  })(BaseView);

  generateDigitCtx = function(digits) {
    var first, i, index, pair, pairContexts, pairs, second, str, _i, _j, _len, _ref;
    pairContexts = [];
    pairs = [];
    for (i = _i = 0, _ref = (digits.length - 1) / 2; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      first = digits[i * 2];
      second = digits[i * 2 + 1] || '';
      pairs.push("" + first + second);
    }
    for (_j = 0, _len = pairs.length; _j < _len; _j++) {
      pair = pairs[_j];
      index = parseInt(pair, 10);
      str = map[index];
      pairContexts.push(generateValCtx(pair, str));
    }
    return {
      pairs: pairContexts,
      digits: digits
    };
  };

  generateValCtx = function(pair, str) {
    var char, consParts, digit, digits, parts, temp, _i, _j, _len, _len1;
    parts = [];
    consParts = [];
    temp = {
      vow: false,
      val: ''
    };
    for (_i = 0, _len = str.length; _i < _len; _i++) {
      char = str[_i];
      if (vowels.indexOf(char) !== -1) {
        if (temp.val.length > 0) {
          parts.push(temp);
          consParts.push(temp);
        }
        temp = {
          vow: false,
          val: ''
        };
        parts.push({
          vow: true,
          val: char
        });
      } else {
        temp.val += char;
      }
    }
    if (temp.val.length > 0) {
      parts.push(temp);
      consParts.push(temp);
    }
    if (consParts.length > 0) {
      consParts[0].num = pair[0];
    }
    if (consParts.length > 1) {
      consParts[1].num = pair[1];
    }
    digits = [];
    for (_j = 0, _len1 = pair.length; _j < _len1; _j++) {
      digit = pair[_j];
      digits.push({
        num: digit
      });
    }
    return {
      parts: parts,
      digits: digits
    };
  };

  module.exports = {
    index: HomeView,
    result: ResultView
  };

}).call(this);

},{"../helpers/dom":11,"../core/View":12,"../core/device":3,"../core/renderer":7,"../core/views":8,"../fixtures/map":13,"../controllers/db":5}],8:[function(require,module,exports){
// Generated by CoffeeScript 1.6.1
(function() {
  var getByRole, renderer, transitions;

  renderer = require('./renderer');

  getByRole = require('../helpers/dom').getByRole;

  transitions = require('./viewTransitions');

  module.exports = {
    wrap: $('#view-wrap'),
    current: null,
    shown: [],
    views: {},
    closeAll: function() {
      return getByRole('view', this.wrap).remove();
    },
    load: function(ns, view) {
      return this.views[ns] = view;
    },
    open: function(ns, transition, callback, openOnTop, options) {
      var view;
      if (transition == null) {
        transition = null;
      }
      if (callback == null) {
        callback = null;
      }
      if (openOnTop == null) {
        openOnTop = false;
      }
      if (options == null) {
        options = {};
      }
      if (!openOnTop) {
        this.shown = [];
      }
      if ((transition != null) && this.animating) {
        return false;
      }
      if (typeof ns === 'object') {
        view = ns;
      } else {
        view = new this.views[ns](options);
      }
      if (view.elements == null) {
        view.render(this.wrap);
      } else {
        view.show();
      }
      if ((transition != null) && _.has(this.transitions, transition)) {
        this.applyTransition(view, transition, callback, openOnTop);
      } else {
        this.onShown(view, callback, openOnTop);
      }
      return view;
    },
    applyTransition: function(view, transition, callback, openOnTop) {
      var newViewStyle, oldViewStyle,
        _this = this;
      if (callback == null) {
        callback = null;
      }
      if (openOnTop == null) {
        openOnTop = false;
      }
      this.animating = true;
      oldViewStyle = this.current.elements.main.attr('style');
      newViewStyle = view.elements.main.attr('style');
      return this.transitions[transition](view, this.current, function() {
        _this.animating = false;
        _this.onShown(view, callback, openOnTop);
        _this.current.elements.main.stop();
        view.elements.main.stop();
        if (oldViewStyle) {
          _this.current.elements.main.attr('style', oldViewStyle);
        } else {
          _this.current.elements.main.removeAttr('style');
        }
        if (newViewStyle) {
          view.elements.main.attr('style', newViewStyle);
        } else {
          view.elements.main.removeAttr('style');
        }
        return _this.wrap.removeAttr('style');
      });
    },
    onShown: function(view, callback, openOnTop) {
      if (callback == null) {
        callback = null;
      }
      if (openOnTop == null) {
        openOnTop = false;
      }
      if (!openOnTop) {
        if (this.current != null) {
          this.current.close();
        }
      } else {
        this.current.hide();
      }
      this.shown.push(view);
      this.current = view;
      if (callback != null) {
        return callback(view);
      }
    },
    transitions: transitions
  };

}).call(this);

},{"./renderer":7,"../helpers/dom":11,"./viewTransitions":14}],9:[function(require,module,exports){
// Generated by CoffeeScript 1.6.1
(function() {

  module.exports = {
    radToDeg: function(rad) {
      return rad * (180 / Math.PI);
    },
    degToRad: function(deg) {
      return deg * (Math.PI / 180);
    },
    degToVector: function(deg, force) {
      var rad, vector;
      if (force == null) {
        force = 1;
      }
      rad = this.degToRad(deg);
      vector = {
        x: force * Math.cos(rad),
        y: force * Math.sin(rad)
      };
      return vector;
    },
    getDistance: function(a, b) {
      var xs, ys;
      xs = b.x - a.x;
      xs = xs * xs;
      ys = b.y - a.y;
      ys = ys * ys;
      return Math.abs(Math.sqrt(xs + ys));
    },
    sumVectors: function(vectors) {
      var angleDeg, anglesSumX, anglesSumY, deg, force, forceSum, vector, _i, _len;
      anglesSumX = 0;
      anglesSumY = 0;
      forceSum = 0;
      for (_i = 0, _len = vectors.length; _i < _len; _i++) {
        vector = vectors[_i];
        deg = Math.atan2(vector.y, vector.x);
        anglesSumX += Math.cos(deg);
        anglesSumY += Math.sin(deg);
        forceSum += Math.abs(vector.x) + Math.abs(vector.y);
      }
      angleDeg = Math.floor(this.radToDeg(Math.atan2(anglesSumY, anglesSumX)));
      force = forceSum;
      return this.degToVector(angleDeg, force);
    }
  };

}).call(this);

},{}],11:[function(require,module,exports){
// Generated by CoffeeScript 1.6.1
(function() {

  module.exports = {
    getByRole: function(role, parent, filter) {
      var selector;
      if (parent == null) {
        parent = null;
      }
      if (filter == null) {
        filter = '';
      }
      selector = "[data-role='" + role + "']" + filter;
      if (parent == null) {
        return $(selector);
      } else {
        return parent.find(selector);
      }
    }
  };

}).call(this);

},{}],13:[function(require,module,exports){
// Generated by CoffeeScript 1.6.1
(function() {
  var old;

  module.exports = ['suss', 'sad', 'sun', 'sum', 'sore', 'sail', 'slush', 'sick', 'sofa', 'soup', 'dose', 'dead', 'dine', 'dim', 'door', 'doll', 'dish', 'dick', 'dive', 'deep', 'noise', 'nude', 'neon', 'gnome', 'near', 'nail', 'nacho', 'neck', 'knife', 'nap', 'mess', 'mad', 'moon', 'mum', 'more', 'meal', 'mash', 'muck', 'muff', 'map', 'rose', 'ride', 'rain', 'rum', 'roar', 'roll', 'rush', 'rock', 'roof', 'rope', 'less', 'laid', 'lion', 'lime', 'lure', 'lol', 'lush', 'lick', 'lip', 'cheese', 'chat', 'china', 'chum', 'chair', 'chill', 'cha-cha', 'choke', 'chief', 'cheap', 'kiss', 'kid', 'keen', 'kim', 'korea', 'kill', 'kwatch', 'kick', 'koffee', 'keep', 'fuss', 'food', 'fun', 'fame', 'fur', 'fool', 'fish', 'fuck', 'five', 'fob', 'bees', 'bud', 'bin', 'boom', 'bear', 'ball', 'batch', 'book', 'beef', 'boob'];

  old = ['zoo', 'tie', 'Noah', 'Ma', 'Rye', 'Law', 'shoe', 'ivy', 'bee', 'toes', 'tot', 'tin', 'Tomb', 'tyre', 'Towel', 'Dish', 'Tack', 'dove', 'Tub', 'nose', 'net', 'nun', 'Name', 'nero', 'nail', 'notch', 'neck', 'knife', 'knob', 'Mice', 'mat', 'moon', 'mummy', 'mower', 'mule', 'match', 'mug', 'movie', 'mop', 'rose', 'rod', 'rain', 'Ram', 'Rower', 'roll', 'Roach', 'rock', 'roof', 'rope', 'lace', 'loot', 'lion', 'Loom', 'lure', 'lily', 'leech', 'log', 'lava', 'lip', 'cheese', 'sheet', 'chain', 'Chum', 'cherry', 'jail', 'Choo', 'chalk', 'chef', 'ship', 'Case', 'Cot', 'coin', 'comb', 'car', 'coal', 'cage', 'coke', 'cave', 'Cob', 'fez', 'Fit', 'phone', 'foam', 'Fur', 'file', 'fish', 'fog', 'FiFi', 'fob', 'bus', 'bat', 'bone', 'bum', 'bear', 'bell', 'beach', 'book', 'poof', 'pipe', 'Disease'];

}).call(this);

},{}],10:[function(require,module,exports){
// Generated by CoffeeScript 1.6.1
(function() {
  var Orb, device, renderer, states,
    _this = this;

  renderer = require('../core/renderer');

  device = require('../core/device');

  states = ['detractor', 'attractor'];

  Orb = (function() {

    function Orb(x, y) {
      var _this = this;
      this.update = function(animate) {
        if (animate == null) {
          animate = false;
        }
        return Orb.prototype.update.apply(_this, arguments);
      };
      this.applyVector = function(vector) {
        return Orb.prototype.applyVector.apply(_this, arguments);
      };
      this.place = function(x, y, animate) {
        if (animate == null) {
          animate = false;
        }
        return Orb.prototype.place.apply(_this, arguments);
      };
      this.getState = function() {
        return Orb.prototype.getState.apply(_this, arguments);
      };
      this.switchState = function() {
        return Orb.prototype.switchState.apply(_this, arguments);
      };
      this.element = $(renderer.render('partials/game/orb', this));
      this.element.data('orb', this);
      this.place(x, y);
      this.vector = {
        x: 0,
        y: 0
      };
      this.state = -1;
      this.switchState();
    }

    Orb.prototype.switchState = function() {
      var state, _i, _len;
      this.state++;
      if (this.state > states.length - 1) {
        this.state = 0;
      }
      for (_i = 0, _len = states.length; _i < _len; _i++) {
        state = states[_i];
        this.element.removeClass("state-" + state);
      }
      return this.element.addClass("state-" + states[this.state]);
    };

    Orb.prototype.getState = function() {
      return states[this.state];
    };

    Orb.prototype.place = function(x, y, animate) {
      var c, newPos;
      if (animate == null) {
        animate = false;
      }
      this.x = x;
      this.y = y;
      c = device.get('center');
      newPos = {
        x: c.x + x,
        y: c.y + y
      };
      if (!animate) {
        return this.element.css(newPos);
      } else {
        return this.element.transition(newPos, 200);
      }
    };

    Orb.prototype.applyVector = function(vector) {
      this.vector.x += vector.x;
      return this.vector.y += vector.y;
    };

    Orb.prototype.update = function(animate) {
      if (animate == null) {
        animate = false;
      }
      this.place(this.x + this.vector.x, this.y + this.vector.y, animate);
      return this.vector = {
        x: 0,
        y: 0
      };
    };

    return Orb;

  })();

  module.exports = {
    Orb: Orb
  };

}).call(this);

},{"../core/renderer":7,"../core/device":3}],12:[function(require,module,exports){
// Generated by CoffeeScript 1.6.1
(function() {
  var BaseView, device, renderer,
    _this = this;

  renderer = require('./renderer');

  device = require('./device');

  BaseView = (function() {

    BaseView.prototype.templateName = '';

    BaseView.prototype.fixHeight = false;

    BaseView.prototype.classNames = '';

    BaseView.prototype.context = {};

    function BaseView() {
      var _this = this;
      this.show = function() {
        return BaseView.prototype.show.apply(_this, arguments);
      };
      this.hide = function() {
        return BaseView.prototype.hide.apply(_this, arguments);
      };
      this.close = function() {
        return BaseView.prototype.close.apply(_this, arguments);
      };
      this.bind = function() {
        return BaseView.prototype.bind.apply(_this, arguments);
      };
      this.resize = function() {
        return BaseView.prototype.resize.apply(_this, arguments);
      };
      this.getElements = function() {
        return BaseView.prototype.getElements.apply(_this, arguments);
      };
      this.render = function(wrapper) {
        return BaseView.prototype.render.apply(_this, arguments);
      };
    }

    BaseView.prototype.render = function(wrapper) {
      var rendered,
        _this = this;
      rendered = renderer.render("views/" + this.templateName, this.context);
      this.elements = {
        main: $("<div data-role='view' class='view " + this.classNames + "'>" + rendered + "</div>")
      };
      if (this.fixHeight) {
        this.elements.main.css({
          height: device.get('size').height
        });
      }
      this.getElements();
      if (wrapper != null) {
        this.elements.main.appendTo(wrapper);
      }
      this.resize();
      this.bind();
      $(window).on('resize', function() {
        return _this.resize();
      });
      return this;
    };

    BaseView.prototype.getElements = function() {};

    BaseView.prototype.resize = function() {};

    BaseView.prototype.bind = function() {};

    BaseView.prototype.close = function() {
      return this.elements.main.remove();
    };

    BaseView.prototype.hide = function() {
      return this.elements.main.hide();
    };

    BaseView.prototype.show = function() {
      this.elements.main.removeAttr('style');
      this.resize();
      return this.elements.main.show();
    };

    return BaseView;

  })();

  module.exports = {
    BaseView: BaseView
  };

}).call(this);

},{"./renderer":7,"./device":3}],14:[function(require,module,exports){
// Generated by CoffeeScript 1.6.1
(function() {
  var debug, defaultDuration, device, horizontalSlide, placeAbsolutely, popView, wrap;

  device = require('./device');

  debug = require('./debug');

  defaultDuration = debug.get('fast') ? 0 : 400;

  wrap = $('#view-wrap');

  placeAbsolutely = function(view) {
    var deviceSize;
    deviceSize = device.get('size');
    return view.elements.main.css({
      position: 'absolute',
      top: 0,
      left: 0,
      width: deviceSize.width,
      height: deviceSize.height
    });
  };

  popView = function(scaleFrom, newView, oldView, callback, duration) {
    if (duration == null) {
      duration = defaultDuration;
    }
    placeAbsolutely(newView);
    newView.elements.main.css({
      scale: scaleFrom,
      opacity: 0
    });
    newView.elements.main.transition({
      scale: 1,
      opacity: 1
    });
    return setTimeout(function() {
      return callback(newView);
    }, defaultDuration);
  };

  horizontalSlide = function(dir, newView, oldView, callback, duration) {
    var deviceSize;
    if (duration == null) {
      duration = defaultDuration;
    }
    deviceSize = device.get('size');
    wrap.css({
      width: deviceSize.width,
      'overflow-x': 'hidden',
      position: 'relative'
    });
    placeAbsolutely(newView);
    newView.elements.main.css({
      x: (100 * dir) + '%'
    });
    newView.elements.main.transition({
      x: '0'
    }, duration);
    if (oldView != null) {
      oldView.elements.main.css({
        width: deviceSize.width,
        height: deviceSize.height
      });
      return oldView.elements.main.transition({
        x: (100 * -dir) + '%'
      }, duration, function() {
        return callback(newView);
      });
    }
  };

  module.exports = {
    'slide-right': function(newView, oldView, callback) {
      return horizontalSlide(1, newView, oldView, callback);
    },
    'slide-left': function(newView, oldView, callback) {
      return horizontalSlide(-1, newView, oldView, callback);
    },
    'flip': function(newView, oldView, callback) {
      var duration;
      duration = defaultDuration;
      placeAbsolutely(newView);
      oldView.elements.main.css({
        position: 'relative',
        'z-index': 1
      });
      newView.elements.main.css({
        'z-index': -1,
        rotateY: '-90deg',
        z: -500
      });
      oldView.elements.main.transition({
        rotateY: '90deg'
      }, duration / 2);
      return setTimeout(function() {
        return newView.elements.main.transition({
          rotateY: '0deg'
        }, duration / 2);
      }, duration / 2, function() {
        return callback(newView);
      });
    },
    'pop-out': function(newView, oldView, callback) {
      return popView(2.2, newView, oldView, callback);
    },
    'pop-in': function(newView, oldView, callback) {
      return popView(.7, newView, oldView, callback);
    }
  };

}).call(this);

},{"./device":3,"./debug":15}],15:[function(require,module,exports){
// Generated by CoffeeScript 1.6.1
(function() {
  var debug;

  debug = {
    fast: false
  };

  module.exports = {
    get: function(prop) {
      switch (prop) {
        case 'fast':
          return debug.fast;
      }
    }
  };

}).call(this);

},{}],7:[function(require,module,exports){
// Generated by CoffeeScript 1.6.1
(function() {
  var Hogan, defaults;

  Hogan = require('hogan.js');

  defaults = {
    prefix: ''
  };

  module.exports = {
    initialise: function(conf) {
      this.conf = conf != null ? conf : defaults;
      this.templates = {};
      this.load();
      return this;
    },
    load: function() {
      var id, template, _ref, _results;
      _ref = window.templates;
      _results = [];
      for (id in _ref) {
        template = _ref[id];
        _results.push(this.set(id, new Hogan.Template(template)));
      }
      return _results;
    },
    compile: function(tpl) {
      var template;
      if (template instanceof Hogan.Template) {
        return template = tpl;
      } else {
        return Hogan.compile(tpl);
      }
    },
    set: function(id, template) {
      return this.templates[this.conf.prefix + id] = typeof template === 'string' ? this.compile(template) : template;
    },
    get: function(nsString) {
      if (nsString == null) {
        nsString = null;
      }
      if (nsString != null) {
        return this.templates[this.conf.prefix + nsString];
      } else {
        return this.templates;
      }
    },
    render: function(id, data) {
      if (this.get(id) != null) {
        return this.get(id).render(data, this.templates);
      } else {
        throw "Template '" + id + "' not found";
      }
    }
  };

}).call(this);

},{"hogan.js":16}],16:[function(require,module,exports){
/*
 *  Copyright 2011 Twitter, Inc.
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

// This file is for use with Node.js. See dist/ for browser files.

var Hogan = require('./compiler');
Hogan.Template = require('./template').Template;
module.exports = Hogan; 
},{"./compiler":17,"./template":18}],17:[function(require,module,exports){
/*
 *  Copyright 2011 Twitter, Inc.
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

(function (Hogan) {
  // Setup regex  assignments
  // remove whitespace according to Mustache spec
  var rIsWhitespace = /\S/,
      rQuot = /\"/g,
      rNewline =  /\n/g,
      rCr = /\r/g,
      rSlash = /\\/g,
      tagTypes = {
        '#': 1, '^': 2, '/': 3,  '!': 4, '>': 5,
        '<': 6, '=': 7, '_v': 8, '{': 9, '&': 10
      };

  Hogan.scan = function scan(text, delimiters) {
    var len = text.length,
        IN_TEXT = 0,
        IN_TAG_TYPE = 1,
        IN_TAG = 2,
        state = IN_TEXT,
        tagType = null,
        tag = null,
        buf = '',
        tokens = [],
        seenTag = false,
        i = 0,
        lineStart = 0,
        otag = '{{',
        ctag = '}}';

    function addBuf() {
      if (buf.length > 0) {
        tokens.push(new String(buf));
        buf = '';
      }
    }

    function lineIsWhitespace() {
      var isAllWhitespace = true;
      for (var j = lineStart; j < tokens.length; j++) {
        isAllWhitespace =
          (tokens[j].tag && tagTypes[tokens[j].tag] < tagTypes['_v']) ||
          (!tokens[j].tag && tokens[j].match(rIsWhitespace) === null);
        if (!isAllWhitespace) {
          return false;
        }
      }

      return isAllWhitespace;
    }

    function filterLine(haveSeenTag, noNewLine) {
      addBuf();

      if (haveSeenTag && lineIsWhitespace()) {
        for (var j = lineStart, next; j < tokens.length; j++) {
          if (!tokens[j].tag) {
            if ((next = tokens[j+1]) && next.tag == '>') {
              // set indent to token value
              next.indent = tokens[j].toString()
            }
            tokens.splice(j, 1);
          }
        }
      } else if (!noNewLine) {
        tokens.push({tag:'\n'});
      }

      seenTag = false;
      lineStart = tokens.length;
    }

    function changeDelimiters(text, index) {
      var close = '=' + ctag,
          closeIndex = text.indexOf(close, index),
          delimiters = trim(
            text.substring(text.indexOf('=', index) + 1, closeIndex)
          ).split(' ');

      otag = delimiters[0];
      ctag = delimiters[1];

      return closeIndex + close.length - 1;
    }

    if (delimiters) {
      delimiters = delimiters.split(' ');
      otag = delimiters[0];
      ctag = delimiters[1];
    }

    for (i = 0; i < len; i++) {
      if (state == IN_TEXT) {
        if (tagChange(otag, text, i)) {
          --i;
          addBuf();
          state = IN_TAG_TYPE;
        } else {
          if (text.charAt(i) == '\n') {
            filterLine(seenTag);
          } else {
            buf += text.charAt(i);
          }
        }
      } else if (state == IN_TAG_TYPE) {
        i += otag.length - 1;
        tag = tagTypes[text.charAt(i + 1)];
        tagType = tag ? text.charAt(i + 1) : '_v';
        if (tagType == '=') {
          i = changeDelimiters(text, i);
          state = IN_TEXT;
        } else {
          if (tag) {
            i++;
          }
          state = IN_TAG;
        }
        seenTag = i;
      } else {
        if (tagChange(ctag, text, i)) {
          tokens.push({tag: tagType, n: trim(buf), otag: otag, ctag: ctag,
                       i: (tagType == '/') ? seenTag - ctag.length : i + otag.length});
          buf = '';
          i += ctag.length - 1;
          state = IN_TEXT;
          if (tagType == '{') {
            if (ctag == '}}') {
              i++;
            } else {
              cleanTripleStache(tokens[tokens.length - 1]);
            }
          }
        } else {
          buf += text.charAt(i);
        }
      }
    }

    filterLine(seenTag, true);

    return tokens;
  }

  function cleanTripleStache(token) {
    if (token.n.substr(token.n.length - 1) === '}') {
      token.n = token.n.substring(0, token.n.length - 1);
    }
  }

  function trim(s) {
    if (s.trim) {
      return s.trim();
    }

    return s.replace(/^\s*|\s*$/g, '');
  }

  function tagChange(tag, text, index) {
    if (text.charAt(index) != tag.charAt(0)) {
      return false;
    }

    for (var i = 1, l = tag.length; i < l; i++) {
      if (text.charAt(index + i) != tag.charAt(i)) {
        return false;
      }
    }

    return true;
  }

  function buildTree(tokens, kind, stack, customTags) {
    var instructions = [],
        opener = null,
        token = null;

    while (tokens.length > 0) {
      token = tokens.shift();
      if (token.tag == '#' || token.tag == '^' || isOpener(token, customTags)) {
        stack.push(token);
        token.nodes = buildTree(tokens, token.tag, stack, customTags);
        instructions.push(token);
      } else if (token.tag == '/') {
        if (stack.length === 0) {
          throw new Error('Closing tag without opener: /' + token.n);
        }
        opener = stack.pop();
        if (token.n != opener.n && !isCloser(token.n, opener.n, customTags)) {
          throw new Error('Nesting error: ' + opener.n + ' vs. ' + token.n);
        }
        opener.end = token.i;
        return instructions;
      } else {
        instructions.push(token);
      }
    }

    if (stack.length > 0) {
      throw new Error('missing closing tag: ' + stack.pop().n);
    }

    return instructions;
  }

  function isOpener(token, tags) {
    for (var i = 0, l = tags.length; i < l; i++) {
      if (tags[i].o == token.n) {
        token.tag = '#';
        return true;
      }
    }
  }

  function isCloser(close, open, tags) {
    for (var i = 0, l = tags.length; i < l; i++) {
      if (tags[i].c == close && tags[i].o == open) {
        return true;
      }
    }
  }

  Hogan.generate = function (tree, text, options) {
    var code = 'var _=this;_.b(i=i||"");' + walk(tree) + 'return _.fl();';
    if (options.asString) {
      return 'function(c,p,i){' + code + ';}';
    }

    return new Hogan.Template(new Function('c', 'p', 'i', code), text, Hogan, options);
  }

  function esc(s) {
    return s.replace(rSlash, '\\\\')
            .replace(rQuot, '\\\"')
            .replace(rNewline, '\\n')
            .replace(rCr, '\\r');
  }

  function chooseMethod(s) {
    return (~s.indexOf('.')) ? 'd' : 'f';
  }

  function walk(tree) {
    var code = '';
    for (var i = 0, l = tree.length; i < l; i++) {
      var tag = tree[i].tag;
      if (tag == '#') {
        code += section(tree[i].nodes, tree[i].n, chooseMethod(tree[i].n),
                        tree[i].i, tree[i].end, tree[i].otag + " " + tree[i].ctag);
      } else if (tag == '^') {
        code += invertedSection(tree[i].nodes, tree[i].n,
                                chooseMethod(tree[i].n));
      } else if (tag == '<' || tag == '>') {
        code += partial(tree[i]);
      } else if (tag == '{' || tag == '&') {
        code += tripleStache(tree[i].n, chooseMethod(tree[i].n));
      } else if (tag == '\n') {
        code += text('"\\n"' + (tree.length-1 == i ? '' : ' + i'));
      } else if (tag == '_v') {
        code += variable(tree[i].n, chooseMethod(tree[i].n));
      } else if (tag === undefined) {
        code += text('"' + esc(tree[i]) + '"');
      }
    }
    return code;
  }

  function section(nodes, id, method, start, end, tags) {
    return 'if(_.s(_.' + method + '("' + esc(id) + '",c,p,1),' +
           'c,p,0,' + start + ',' + end + ',"' + tags + '")){' +
           '_.rs(c,p,' +
           'function(c,p,_){' +
           walk(nodes) +
           '});c.pop();}';
  }

  function invertedSection(nodes, id, method) {
    return 'if(!_.s(_.' + method + '("' + esc(id) + '",c,p,1),c,p,1,0,0,"")){' +
           walk(nodes) +
           '};';
  }

  function partial(tok) {
    return '_.b(_.rp("' +  esc(tok.n) + '",c,p,"' + (tok.indent || '') + '"));';
  }

  function tripleStache(id, method) {
    return '_.b(_.t(_.' + method + '("' + esc(id) + '",c,p,0)));';
  }

  function variable(id, method) {
    return '_.b(_.v(_.' + method + '("' + esc(id) + '",c,p,0)));';
  }

  function text(id) {
    return '_.b(' + id + ');';
  }

  Hogan.parse = function(tokens, text, options) {
    options = options || {};
    return buildTree(tokens, '', [], options.sectionTags || []);
  },

  Hogan.cache = {};

  Hogan.compile = function(text, options) {
    // options
    //
    // asString: false (default)
    //
    // sectionTags: [{o: '_foo', c: 'foo'}]
    // An array of object with o and c fields that indicate names for custom
    // section tags. The example above allows parsing of {{_foo}}{{/foo}}.
    //
    // delimiters: A string that overrides the default delimiters.
    // Example: "<% %>"
    //
    options = options || {};

    var key = text + '||' + !!options.asString;

    var t = this.cache[key];

    if (t) {
      return t;
    }

    t = this.generate(this.parse(this.scan(text, options.delimiters), text, options), text, options);
    return this.cache[key] = t;
  };
})(typeof exports !== 'undefined' ? exports : Hogan);

},{}],18:[function(require,module,exports){
/*
 *  Copyright 2011 Twitter, Inc.
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

var Hogan = {};

(function (Hogan, useArrayBuffer) {
  Hogan.Template = function (renderFunc, text, compiler, options) {
    this.r = renderFunc || this.r;
    this.c = compiler;
    this.options = options;
    this.text = text || '';
    this.buf = (useArrayBuffer) ? [] : '';
  }

  Hogan.Template.prototype = {
    // render: replaced by generated code.
    r: function (context, partials, indent) { return ''; },

    // variable escaping
    v: hoganEscape,

    // triple stache
    t: coerceToString,

    render: function render(context, partials, indent) {
      return this.ri([context], partials || {}, indent);
    },

    // render internal -- a hook for overrides that catches partials too
    ri: function (context, partials, indent) {
      return this.r(context, partials, indent);
    },

    // tries to find a partial in the curent scope and render it
    rp: function(name, context, partials, indent) {
      var partial = partials[name];

      if (!partial) {
        return '';
      }

      if (this.c && typeof partial == 'string') {
        partial = this.c.compile(partial, this.options);
      }

      return partial.ri(context, partials, indent);
    },

    // render a section
    rs: function(context, partials, section) {
      var tail = context[context.length - 1];

      if (!isArray(tail)) {
        section(context, partials, this);
        return;
      }

      for (var i = 0; i < tail.length; i++) {
        context.push(tail[i]);
        section(context, partials, this);
        context.pop();
      }
    },

    // maybe start a section
    s: function(val, ctx, partials, inverted, start, end, tags) {
      var pass;

      if (isArray(val) && val.length === 0) {
        return false;
      }

      if (typeof val == 'function') {
        val = this.ls(val, ctx, partials, inverted, start, end, tags);
      }

      pass = (val === '') || !!val;

      if (!inverted && pass && ctx) {
        ctx.push((typeof val == 'object') ? val : ctx[ctx.length - 1]);
      }

      return pass;
    },

    // find values with dotted names
    d: function(key, ctx, partials, returnFound) {
      var names = key.split('.'),
          val = this.f(names[0], ctx, partials, returnFound),
          cx = null;

      if (key === '.' && isArray(ctx[ctx.length - 2])) {
        return ctx[ctx.length - 1];
      }

      for (var i = 1; i < names.length; i++) {
        if (val && typeof val == 'object' && names[i] in val) {
          cx = val;
          val = val[names[i]];
        } else {
          val = '';
        }
      }

      if (returnFound && !val) {
        return false;
      }

      if (!returnFound && typeof val == 'function') {
        ctx.push(cx);
        val = this.lv(val, ctx, partials);
        ctx.pop();
      }

      return val;
    },

    // find values with normal names
    f: function(key, ctx, partials, returnFound) {
      var val = false,
          v = null,
          found = false;

      for (var i = ctx.length - 1; i >= 0; i--) {
        v = ctx[i];
        if (v && typeof v == 'object' && key in v) {
          val = v[key];
          found = true;
          break;
        }
      }

      if (!found) {
        return (returnFound) ? false : "";
      }

      if (!returnFound && typeof val == 'function') {
        val = this.lv(val, ctx, partials);
      }

      return val;
    },

    // higher order templates
    ho: function(val, cx, partials, text, tags) {
      var compiler = this.c;
      var options = this.options;
      options.delimiters = tags;
      var text = val.call(cx, text);
      text = (text == null) ? String(text) : text.toString();
      this.b(compiler.compile(text, options).render(cx, partials));
      return false;
    },

    // template result buffering
    b: (useArrayBuffer) ? function(s) { this.buf.push(s); } :
                          function(s) { this.buf += s; },
    fl: (useArrayBuffer) ? function() { var r = this.buf.join(''); this.buf = []; return r; } :
                           function() { var r = this.buf; this.buf = ''; return r; },

    // lambda replace section
    ls: function(val, ctx, partials, inverted, start, end, tags) {
      var cx = ctx[ctx.length - 1],
          t = null;

      if (!inverted && this.c && val.length > 0) {
        return this.ho(val, cx, partials, this.text.substring(start, end), tags);
      }

      t = val.call(cx);

      if (typeof t == 'function') {
        if (inverted) {
          return true;
        } else if (this.c) {
          return this.ho(t, cx, partials, this.text.substring(start, end), tags);
        }
      }

      return t;
    },

    // lambda replace variable
    lv: function(val, ctx, partials) {
      var cx = ctx[ctx.length - 1];
      var result = val.call(cx);

      if (typeof result == 'function') {
        result = coerceToString(result.call(cx));
        if (this.c && ~result.indexOf("{\u007B")) {
          return this.c.compile(result, this.options).render(cx, partials);
        }
      }

      return coerceToString(result);
    }

  };

  var rAmp = /&/g,
      rLt = /</g,
      rGt = />/g,
      rApos =/\'/g,
      rQuot = /\"/g,
      hChars =/[&<>\"\']/;


  function coerceToString(val) {
    return String((val === null || val === undefined) ? '' : val);
  }

  function hoganEscape(str) {
    str = coerceToString(str);
    return hChars.test(str) ?
      str
        .replace(rAmp,'&amp;')
        .replace(rLt,'&lt;')
        .replace(rGt,'&gt;')
        .replace(rApos,'&#39;')
        .replace(rQuot, '&quot;') :
      str;
  }

  var isArray = Array.isArray || function(a) {
    return Object.prototype.toString.call(a) === '[object Array]';
  };

})(typeof exports !== 'undefined' ? exports : Hogan);


},{}]},{},[1])
;