// Generated by CoffeeScript 1.6.1
(function() {
  var BaseView, GameView, device, getByRole, views,
    _this = this,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  getByRole = require('../helpers/dom').getByRole;

  views = require('../core/views');

  BaseView = require('../core/View').BaseView;

  device = require('../core/device');

  GameView = (function(_super) {

    __extends(GameView, _super);

    GameView.prototype.templateName = 'game/index';

    GameView.prototype.fixHeight = true;

    function GameView() {
      var _this = this;
      this.resize = function() {
        return GameView.prototype.resize.apply(_this, arguments);
      };
      this.bind = function() {
        return GameView.prototype.bind.apply(_this, arguments);
      };
      this.getElements = function() {
        return GameView.prototype.getElements.apply(_this, arguments);
      };
    }

    GameView.prototype.getElements = function() {
      GameView.__super__.getElements.call(this);
      this.elements.closeGame = getByRole('close-game', this.elements.main);
      this.elements.game = getByRole('game', this.elements.main);
      this.elements.gameHeader = getByRole('game-header', this.elements.game);
      this.elements.gameArea = getByRole('game-area', this.elements.game);
      this.elements.gridWraps = {
        self: getByRole('grid-wrap', this.elements.gameArea, '[data-self]'),
        opponent: getByRole('grid-wrap', this.elements.gameArea, '[data-opponent]')
      };
      return this.elements.players = {
        self: getByRole('player-display', this.elements.gameHeader, '[data-self]'),
        opponent: getByRole('player-display', this.elements.gameHeader, '[data-opponent]')
      };
    };

    GameView.prototype.bind = function() {
      var _this = this;
      GameView.__super__.bind.call(this);
      return this.elements.closeGame.on(device.get('clickEvent'), function() {
        return views.open('main.index', 'pop-out');
      });
    };

    GameView.prototype.resize = function() {
      GameView.__super__.resize.call(this);
      return this.elements.gameArea.css({
        height: device.get('size').height - this.elements.gameHeader.outerHeight()
      });
    };

    return GameView;

  })(BaseView);

  module.exports = {
    index: GameView
  };

}).call(this);
