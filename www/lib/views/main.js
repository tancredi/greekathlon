// Generated by CoffeeScript 1.6.1
(function() {
  var BaseView, HomeView, ResultView, device, getByRole, map, views, vowels,
    _this = this,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  getByRole = require('../helpers/dom').getByRole;

  BaseView = require('../core/View').BaseView;

  device = require('../core/device');

  views = require('../core/views');

  map = require('../fixtures/map');

  vowels = ['a', 'e', 'i', 'o', 'u'];

  HomeView = (function(_super) {

    __extends(HomeView, _super);

    HomeView.prototype.templateName = 'home';

    HomeView.prototype.fixHeight = true;

    function HomeView() {
      var _this = this;
      this.submit = function() {
        return HomeView.prototype.submit.apply(_this, arguments);
      };
      this.bind = function() {
        return HomeView.prototype.bind.apply(_this, arguments);
      };
      this.getElements = function() {
        return HomeView.prototype.getElements.apply(_this, arguments);
      };
    }

    HomeView.prototype.getElements = function() {
      HomeView.__super__.getElements.call(this);
      this.elements.form = this.elements.main.find('form');
      this.elements.input = getByRole('digit-input', this.elements.form);
      return this.elements.button = this.elements.form.find('button');
    };

    HomeView.prototype.bind = function() {
      var self;
      HomeView.__super__.bind.call(this);
      self = this;
      this.elements.input.focus();
      this.elements.input.on('keydown', function(e) {
        var charCode, isAllowed, isNumber;
        charCode = e.which ? e.which : e.keyCode;
        isNumber = (charCode >= 48 && charCode <= 57) || charCode === 43;
        isAllowed = charCode === 8 || charCode === 13;
        if (!isNumber && !isAllowed) {
          return false;
        }
        if (charCode === 13) {
          return self.submit();
        }
      });
      return this.elements.button.on(device.get('clickEvent'), function() {
        self.submit();
        return false;
      });
    };

    HomeView.prototype.submit = function() {
      var digits;
      digits = this.elements.input.val();
      return views.open('main.result', 'pop-out', null, false, digits);
    };

    return HomeView;

  })(BaseView);

  ResultView = (function(_super) {

    __extends(ResultView, _super);

    ResultView.prototype.templateName = 'result';

    ResultView.prototype.fixHeight = true;

    function ResultView(digits) {
      var first, i, index, pair, pairContexts, pairs, second, str, _i, _j, _len, _ref,
        _this = this;
      this.generateValCtx = function(pair, str) {
        return ResultView.prototype.generateValCtx.apply(_this, arguments);
      };
      pairContexts = [];
      pairs = [];
      for (i = _i = 0, _ref = (digits.length - 1) / 2; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        first = digits[i * 2];
        second = digits[i * 2 + 1] || '';
        pairs.push("" + first + second);
      }
      for (_j = 0, _len = pairs.length; _j < _len; _j++) {
        pair = pairs[_j];
        index = parseInt(pair, 10);
        str = map[index];
        pairContexts.push(this.generateValCtx(pair, str));
      }
      $.extend(this.context, {
        pairs: pairContexts
      });
    }

    ResultView.prototype.generateValCtx = function(pair, str) {
      var char, consParts, digit, digits, parts, temp, _i, _j, _len, _len1;
      parts = [];
      consParts = [];
      temp = {
        vow: false,
        val: ''
      };
      for (_i = 0, _len = str.length; _i < _len; _i++) {
        char = str[_i];
        if (vowels.indexOf(char) !== -1) {
          if (temp.val.length > 0) {
            parts.push(temp);
            consParts.push(temp);
          }
          temp = {
            vow: false,
            val: ''
          };
          parts.push({
            vow: true,
            val: char
          });
        } else {
          temp.val += char;
        }
      }
      if (temp.val.length > 0) {
        parts.push(temp);
        consParts.push(temp);
      }
      if (consParts.length > 0) {
        consParts[0].num = pair[0];
      }
      if (consParts.length > 1) {
        consParts[1].num = pair[1];
      }
      digits = [];
      for (_j = 0, _len1 = pair.length; _j < _len1; _j++) {
        digit = pair[_j];
        digits.push({
          num: digit
        });
      }
      return {
        parts: parts,
        digits: digits
      };
    };

    return ResultView;

  })(BaseView);

  module.exports = {
    index: HomeView,
    result: ResultView
  };

}).call(this);
