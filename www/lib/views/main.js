// Generated by CoffeeScript 1.6.1
(function() {
  var BaseView, HomeView, ResultView, db, device, generateDigitCtx, generateValCtx, getByRole, map, renderer, views, vowels,
    _this = this,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  getByRole = require('../helpers/dom').getByRole;

  BaseView = require('../core/View').BaseView;

  device = require('../core/device');

  renderer = require('../core/renderer');

  views = require('../core/views');

  map = require('../fixtures/map');

  db = require('../controllers/db');

  vowels = ['a', 'e', 'i', 'o', 'u'];

  HomeView = (function(_super) {

    __extends(HomeView, _super);

    HomeView.prototype.templateName = 'home';

    function HomeView() {
      var _this = this;
      this.submit = function() {
        return HomeView.prototype.submit.apply(_this, arguments);
      };
      this.bind = function() {
        return HomeView.prototype.bind.apply(_this, arguments);
      };
      this.getElements = function() {
        return HomeView.prototype.getElements.apply(_this, arguments);
      };
    }

    HomeView.prototype.getElements = function() {
      HomeView.__super__.getElements.call(this);
      this.elements.form = this.elements.main.find('form');
      this.elements.input = getByRole('digit-input', this.elements.form);
      this.elements.button = this.elements.form.find('button');
      return this.elements.savedWrap = getByRole('saved-wrap', this.elements.main);
    };

    HomeView.prototype.bind = function() {
      var scrolling, self;
      HomeView.__super__.bind.call(this);
      self = this;
      this.elements.input.on('keydown', function(e) {
        var charCode, isAllowed, isNumber;
        charCode = e.which ? e.which : e.keyCode;
        isNumber = (charCode >= 48 && charCode <= 57) || charCode === 43;
        isAllowed = charCode === 8 || charCode === 13;
        if (!isNumber && !isAllowed) {
          return false;
        }
      });
      this.elements.input.on('change', function() {
        return self.submit();
      });
      this.elements.form.on('submit', function() {
        return false;
      });
      this.elements.button.on(device.get('clickEvent'), function() {
        self.submit();
        return false;
      });
      db.getAll(function(data) {
        var ctx, entry, savedList, _i, _len;
        ctx = [];
        for (_i = 0, _len = data.length; _i < _len; _i++) {
          entry = data[_i];
          ctx.push(generateDigitCtx(entry.value));
        }
        savedList = $(renderer.render('partials/saved-list', {
          entries: ctx
        }));
        return self.elements.savedWrap.append(savedList);
      });
      scrolling = null;
      this.elements.main.on('touchmove', '[data-role="saved-digits"]', function(e) {
        return scrolling = true;
      });
      this.elements.main.on('touchstart', '[data-role="saved-digits"]', function(e) {
        scrolling = false;
        return null;
      });
      return this.elements.main.on('touchend', '[data-role="saved-digits"]', function(e) {
        var digits;
        if (!scrolling) {
          digits = $(this).attr('data-digits');
          views.open('main.result', 'slide-right', null, false, digits);
        }
        scrolling = false;
        return true;
      });
    };

    HomeView.prototype.submit = function() {
      var digits;
      digits = this.elements.input.val();
      views.open('main.result', 'slide-right', null, false, digits);
      return db.save(digits);
    };

    return HomeView;

  })(BaseView);

  ResultView = (function(_super) {

    __extends(ResultView, _super);

    ResultView.prototype.templateName = 'result';

    ResultView.prototype.fixHeight = true;

    ResultView.prototype.classNames = 'view-results';

    ResultView.prototype.getElements = function() {
      ResultView.__super__.getElements.call(this);
      return this.elements.back = getByRole('back', this.elements.main);
    };

    function ResultView(digits) {
      var pairContexts,
        _this = this;
      this.bind = function() {
        return ResultView.prototype.bind.apply(_this, arguments);
      };
      this.getElements = function() {
        return ResultView.prototype.getElements.apply(_this, arguments);
      };
      pairContexts = generateDigitCtx(digits);
      $.extend(this.context, pairContexts);
    }

    ResultView.prototype.bind = function() {
      ResultView.__super__.bind.call(this);
      return this.elements.back.on(device.get('clickEvent'), function() {
        return app.views.open('main.index', 'slide-left');
      });
    };

    return ResultView;

  })(BaseView);

  generateDigitCtx = function(digits) {
    var first, i, index, pair, pairContexts, pairs, second, str, _i, _j, _len, _ref;
    pairContexts = [];
    pairs = [];
    for (i = _i = 0, _ref = (digits.length - 1) / 2; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      first = digits[i * 2];
      second = digits[i * 2 + 1] || '';
      pairs.push("" + first + second);
    }
    for (_j = 0, _len = pairs.length; _j < _len; _j++) {
      pair = pairs[_j];
      index = parseInt(pair, 10);
      str = map[index];
      pairContexts.push(generateValCtx(pair, str));
    }
    return {
      pairs: pairContexts,
      digits: digits
    };
  };

  generateValCtx = function(pair, str) {
    var char, consParts, digit, digits, parts, temp, _i, _j, _len, _len1;
    parts = [];
    consParts = [];
    temp = {
      vow: false,
      val: ''
    };
    for (_i = 0, _len = str.length; _i < _len; _i++) {
      char = str[_i];
      if (vowels.indexOf(char) !== -1) {
        if (temp.val.length > 0) {
          parts.push(temp);
          consParts.push(temp);
        }
        temp = {
          vow: false,
          val: ''
        };
        parts.push({
          vow: true,
          val: char
        });
      } else {
        temp.val += char;
      }
    }
    if (temp.val.length > 0) {
      parts.push(temp);
      consParts.push(temp);
    }
    if (consParts.length > 0) {
      consParts[0].num = pair[0];
    }
    if (consParts.length > 1) {
      consParts[1].num = pair[1];
    }
    digits = [];
    for (_j = 0, _len1 = pair.length; _j < _len1; _j++) {
      digit = pair[_j];
      digits.push({
        num: digit
      });
    }
    return {
      parts: parts,
      digits: digits
    };
  };

  module.exports = {
    index: HomeView,
    result: ResultView
  };

}).call(this);
