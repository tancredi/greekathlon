// Generated by CoffeeScript 1.6.1
(function() {
  var BaseView, MultipleChoiceView, debug, device, feedbackDelay, getByRole, showChoices,
    _this = this,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  getByRole = require('../helpers/dom').getByRole;

  BaseView = require('../core/View').BaseView;

  device = require('../core/device');

  debug = require('../core/debug');

  feedbackDelay = debug.get('fast') ? 0 : 1000;

  showChoices = 3;

  MultipleChoiceView = (function(_super) {

    __extends(MultipleChoiceView, _super);

    MultipleChoiceView.prototype.templateName = 'game/multiple-choice';

    MultipleChoiceView.prototype.fixHeight = true;

    function MultipleChoiceView(options) {
      var choice, i, index, pushedAlternatives, _i, _len, _ref,
        _this = this;
      this.getElements = function() {
        return MultipleChoiceView.prototype.getElements.apply(_this, arguments);
      };
      this.finish = function(correct) {
        return MultipleChoiceView.prototype.finish.apply(_this, arguments);
      };
      this.answer = function(choice) {
        return MultipleChoiceView.prototype.answer.apply(_this, arguments);
      };
      this.bind = function() {
        return MultipleChoiceView.prototype.bind.apply(_this, arguments);
      };
      this.context.term = options.term;
      this.context.choices = [
        {
          text: options.definition,
          correct: true
        }
      ];
      pushedAlternatives = [];
      while (this.context.choices.length < showChoices) {
        index = Math.floor(Math.random() * options.alternatives.length);
        if (pushedAlternatives.indexOf(index) === -1) {
          pushedAlternatives.push(index);
          this.context.choices.push({
            text: options.alternatives[index],
            correct: false
          });
        }
      }
      this.context.choices.sort(function(a, b) {
        return (Math.floor(Math.random() * 2)) || -1;
      });
      _ref = this.context.choices;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        choice = _ref[i];
        choice.index = i;
      }
    }

    MultipleChoiceView.prototype.bind = function() {
      var self;
      MultipleChoiceView.__super__.bind.call(this);
      self = this;
      return this.elements.choices.on(device.get('clickEvent'), function() {
        var choice;
        choice = $(this);
        return self.answer(choice);
      });
    };

    MultipleChoiceView.prototype.answer = function(choice) {
      var className, correct, self;
      self = this;
      correct = choice.is('[data-correct]');
      className = correct ? 'correct' : 'wrong';
      this.elements.choicesList.addClass("answered answered-" + className);
      choice.addClass("chosen");
      this.elements.choices.off(device.get('clickEvent'));
      return setTimeout(function() {
        return self.finish(correct);
      }, feedbackDelay);
    };

    MultipleChoiceView.prototype.finish = function(correct) {
      return _(this).emit('finish', [correct]);
    };

    MultipleChoiceView.prototype.getElements = function() {
      MultipleChoiceView.__super__.getElements.call(this);
      this.elements.choicesList = getByRole('test-choices', this.elements.main);
      return this.elements.choices = this.elements.choicesList.find('li');
    };

    return MultipleChoiceView;

  })(BaseView);

  module.exports = {
    'multiple-choice': MultipleChoiceView
  };

}).call(this);
