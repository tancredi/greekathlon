// Generated by CoffeeScript 1.6.1
(function() {
  var Orb, device, renderer, states,
    _this = this;

  renderer = require('../core/renderer');

  device = require('../core/device');

  states = ['detractor', 'attractor'];

  Orb = (function() {

    function Orb(x, y) {
      var _this = this;
      this.update = function(animate) {
        if (animate == null) {
          animate = false;
        }
        return Orb.prototype.update.apply(_this, arguments);
      };
      this.applyVector = function(vector) {
        return Orb.prototype.applyVector.apply(_this, arguments);
      };
      this.place = function(x, y, animate) {
        if (animate == null) {
          animate = false;
        }
        return Orb.prototype.place.apply(_this, arguments);
      };
      this.getState = function() {
        return Orb.prototype.getState.apply(_this, arguments);
      };
      this.switchState = function() {
        return Orb.prototype.switchState.apply(_this, arguments);
      };
      this.element = $(renderer.render('partials/game/orb', this));
      this.element.data('orb', this);
      this.place(x, y);
      this.vector = {
        x: 0,
        y: 0
      };
      this.state = -1;
      this.switchState();
    }

    Orb.prototype.switchState = function() {
      var state, _i, _len;
      this.state++;
      if (this.state > states.length - 1) {
        this.state = 0;
      }
      for (_i = 0, _len = states.length; _i < _len; _i++) {
        state = states[_i];
        this.element.removeClass("state-" + state);
      }
      return this.element.addClass("state-" + states[this.state]);
    };

    Orb.prototype.getState = function() {
      return states[this.state];
    };

    Orb.prototype.place = function(x, y, animate) {
      var c, newPos;
      if (animate == null) {
        animate = false;
      }
      this.x = x;
      this.y = y;
      c = device.get('center');
      newPos = {
        x: c.x + x,
        y: c.y + y
      };
      if (!animate) {
        return this.element.css(newPos);
      } else {
        return this.element.transition(newPos, 200);
      }
    };

    Orb.prototype.applyVector = function(vector) {
      this.vector.x += vector.x;
      return this.vector.y += vector.y;
    };

    Orb.prototype.update = function(animate) {
      if (animate == null) {
        animate = false;
      }
      this.place(this.x + this.vector.x, this.y + this.vector.y, animate);
      return this.vector = {
        x: 0,
        y: 0
      };
    };

    return Orb;

  })();

  module.exports = {
    Orb: Orb
  };

}).call(this);
