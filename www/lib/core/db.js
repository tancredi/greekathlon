// Generated by CoffeeScript 1.6.1
(function() {

  module.exports = {
    initialise: function() {
      var _this = this;
      this.db = window.openDatabase("diary", 1, "diary", 1000000);
      return this.db.transaction(function(t) {
        return t.executeSql('create table if not exists digits(' + 'id INTEGER PRIMARY KEY AUTOINCREMENT, value TEXT' + ')');
      }, this.onError);
    },
    onError: function(e) {
      return console.log('DB ERROR:', e);
    },
    query: function(queryStr, options, callback) {
      var _this = this;
      if (options == null) {
        options = [];
      }
      return this.db.transaction(function(t) {
        return t.executeSql(queryStr, options, function(t, results) {
          results = results ? _this.fixResults(results) : null;
          if (typeof callback === 'function') {
            return callback(results);
          }
        }, _this.onError);
      }, this.onError);
    },
    fixResults: function(res) {
      var i, item, result, row, _i, _len, _ref;
      result = [];
      _ref = res.rows;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        item = _ref[i];
        row = res.rows.item(i);
        result.push(row);
      }
      return result;
    },
    select: function(table, conditions, options, callback) {
      var conditionStr, dir, key, queryStr, value;
      if (conditions == null) {
        conditions = {};
      }
      if (options == null) {
        options = {};
      }
      queryStr = "SELECT * FROM " + table;
      conditionStr = ((function() {
        var _results;
        _results = [];
        for (key in conditions) {
          value = conditions[key];
          _results.push("" + key + " = '" + value + "'");
        }
        return _results;
      })()).join(', ');
      if (conditionStr.length) {
        queryStr += " WHERE " + conditionStr;
      }
      if (options.order != null) {
        dir = options.order[1] > 0 ? 'ASC' : 'DESC';
        queryStr += " ORDER BY " + options.order[0] + " " + dir;
      }
      if (options.limit != null) {
        queryStr += " LIMIT " + options.limit;
      }
      return this.query(queryStr, [], callback);
    },
    insert: function(table, values, callback) {
      var key, keys, val;
      if (values == null) {
        values = {};
      }
      keys = ((function() {
        var _results;
        _results = [];
        for (key in values) {
          val = values[key];
          _results.push(key);
        }
        return _results;
      })()).join(', ');
      values = ((function() {
        var _results;
        _results = [];
        for (key in values) {
          val = values[key];
          _results.push("'" + val + "'");
        }
        return _results;
      })()).join(', ');
      return this.query("INSERT INTO " + table + "(" + keys + ") values(" + values + ")", [], callback);
    }
  };

}).call(this);
