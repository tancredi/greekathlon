// Generated by CoffeeScript 1.6.1
(function() {
  var db, debugDb, installedModels, modelsReadyCallbacks;

  db = require('./db');

  debugDb = require('./debug').get('db');

  if (_.has(localStorage, 'installedModels')) {
    installedModels = JSON.parse(localStorage.installedModels || {});
  } else {
    installedModels = {};
  }

  modelsReadyCallbacks = [];

  module.exports = {
    models: {},
    loaded: 0,
    ready: false,
    load: function(ns, model) {
      var routes, _results;
      if (typeof ns === 'object') {
        routes = ns;
        _results = [];
        for (ns in routes) {
          model = routes[ns];
          _results.push(this.load(ns, model));
        }
        return _results;
      } else {
        return this.models[ns] = model;
      }
    },
    initialise: function() {
      var id, model, _ref, _results;
      if (this.getModelsCount() === 0) {
        return this.onModelsReady();
      } else {
        _ref = this.models;
        _results = [];
        for (id in _ref) {
          model = _ref[id];
          _results.push(this.initModel(model));
        }
        return _results;
      }
    },
    initModel: function(model) {
      var isInstalled, isUpdated, serialisedSchema, tableName,
        _this = this;
      this.log("Init '" + model.prototype.tableName + "' schema...");
      tableName = model.prototype.tableName;
      isInstalled = _.has(installedModels, tableName);
      if (isInstalled) {
        serialisedSchema = JSON.stringify(model.prototype.schema);
        isUpdated = serialisedSchema === installedModels[tableName];
        if (!isUpdated) {
          return this.migrateModel(model, function() {
            return _this.onModelReady(model);
          });
        } else {
          return this.onModelReady(model);
        }
      } else {
        return this.installModel(model, function() {
          return _this.onModelReady(model);
        });
      }
    },
    installModel: function(model, callback) {
      var _this = this;
      this.log("Install '" + model.prototype.tableName + "' schema...");
      return db.createTable(model.prototype.tableName, model.prototype.schema, function() {
        installedModels[model.prototype.tableName] = JSON.stringify(model.prototype.schema);
        return _this.onModelReady(model);
      });
    },
    migrateModel: function(model, callback) {
      var _this = this;
      return db.dropTable(model.prototype.tableName, function() {
        return _this.installModel(model, callback);
      });
    },
    onModelReady: function(model) {
      this.log("'" + model.prototype.tableName + "' ready!");
      this.ready++;
      if (this.ready === this.getModelsCount()) {
        this.ready = true;
        return this.onModelsReady();
      }
    },
    onModelsReady: function() {
      var callback, _i, _len, _results;
      this.log('All models loaded!');
      localStorage.installedModels = JSON.stringify(installedModels);
      _results = [];
      for (_i = 0, _len = modelsReadyCallbacks.length; _i < _len; _i++) {
        callback = modelsReadyCallbacks[_i];
        _results.push(callback());
      }
      return _results;
    },
    onReady: function(callback) {
      if (this.ready) {
        callback();
      }
      return modelsReadyCallbacks.push(callback);
    },
    getModelsCount: function() {
      var count, model;
      count = 0;
      for (model in this.models) {
        count++;
      }
      return count;
    },
    log: function(m) {
      if (debugDb) {
        return console.log("DB: " + m);
      }
    }
  };

}).call(this);
