// Generated by CoffeeScript 1.6.1
(function() {
  var InteractiveList, evtPrefix, moveThreshold,
    _this = this;

  moveThreshold = 10;

  evtPrefix = 'touch-';

  InteractiveList = (function() {

    function InteractiveList(options) {
      var _this = this;
      this.bind = function() {
        return InteractiveList.prototype.bind.apply(_this, arguments);
      };
      this.emitEvent = function(name, target, data) {
        return InteractiveList.prototype.emitEvent.apply(_this, arguments);
      };
      this.getTouchPos = function(e) {
        return InteractiveList.prototype.getTouchPos.apply(_this, arguments);
      };
      this.tap = function() {
        return InteractiveList.prototype.tap.apply(_this, arguments);
      };
      this.reset = function() {
        return InteractiveList.prototype.reset.apply(_this, arguments);
      };
      this.onEnd = function() {
        return InteractiveList.prototype.onEnd.apply(_this, arguments);
      };
      this.onScoll = function() {
        return InteractiveList.prototype.onScoll.apply(_this, arguments);
      };
      this.getSwipePercent = function(pos) {
        return InteractiveList.prototype.getSwipePercent.apply(_this, arguments);
      };
      this.getSwipeData = function(pos) {
        return InteractiveList.prototype.getSwipeData.apply(_this, arguments);
      };
      this.onSwipe = function(pos) {
        return InteractiveList.prototype.onSwipe.apply(_this, arguments);
      };
      this.onSwipeStart = function(pos) {
        return InteractiveList.prototype.onSwipeStart.apply(_this, arguments);
      };
      this.onMove = function(pos) {
        return InteractiveList.prototype.onMove.apply(_this, arguments);
      };
      this.onStart = function(target, pos) {
        return InteractiveList.prototype.onStart.apply(_this, arguments);
      };
      this.element = options.element;
      this.entries = options.entries || 'li';
      this.reset();
      this.bind();
    }

    InteractiveList.prototype.onStart = function(target, pos) {
      this.moving = false;
      this.target = target;
      this.isDown = true;
      return this.startPos = pos;
    };

    InteractiveList.prototype.onMove = function(pos) {
      var total, wasScrollStarter, wasSwipeStarter;
      this.lastPos = pos;
      if (this.isDown) {
        this.moved = {
          x: pos.x - this.startPos.x,
          y: pos.y - this.startPos.y
        };
        total = Math.abs(this.moved.x) + Math.abs(this.moved.y);
        if (total > moveThreshold || this.moving) {
          this.moving = true;
          wasScrollStarter = Math.abs(this.moved.y) > moveThreshold;
          wasSwipeStarter = Math.abs(this.moved.x) > moveThreshold && !wasScrollStarter;
          if ((wasSwipeStarter || this.swiping) && !this.scrolling) {
            if (!this.swiping) {
              this.onSwipeStart(pos);
            } else {
              this.onSwipe(pos);
            }
            return this.swiping = true;
          } else {
            if (wasScrollStarter) {
              this.onScoll();
              return this.scrolling = true;
            }
          }
        }
      }
    };

    InteractiveList.prototype.onSwipeStart = function(pos) {
      return this.emitEvent('swipestart', this.target, this.getSwipeData(pos));
    };

    InteractiveList.prototype.onSwipe = function(pos) {
      return this.emitEvent('swipemove', this.target, this.getSwipeData(pos));
    };

    InteractiveList.prototype.getSwipeData = function(pos) {
      return {
        moved: this.moved,
        percent: this.getSwipePercent(pos),
        pos: pos
      };
    };

    InteractiveList.prototype.getSwipePercent = function(pos) {
      var elOffset, elWidth, posX;
      elOffset = this.element.offset();
      elWidth = this.element.width();
      posX = pos.x - elOffset.left;
      return posX * 100 / elWidth;
    };

    InteractiveList.prototype.onScoll = function() {
      return this.emitEvent('scrollmove', this.target);
    };

    InteractiveList.prototype.onEnd = function() {
      if (!this.moving) {
        this.tap();
      } else if (this.swiping) {
        this.emitEvent('swipeend', this.target, this.getSwipeData(this.lastPos));
      } else {
        this.emitEvent('scrollend', this.target);
      }
      return this.reset();
    };

    InteractiveList.prototype.reset = function() {
      this.target = null;
      this.moving = false;
      this.isDown = false;
      this.startPos = {
        x: 0,
        y: 0
      };
      this.moved = {
        x: 0,
        y: 0
      };
      this.lastPos = {
        x: 0,
        y: 0
      };
      this.swiping = false;
      return this.scrolling = false;
    };

    InteractiveList.prototype.tap = function() {
      return this.emitEvent('tap', this.target);
    };

    InteractiveList.prototype.getTouchPos = function(e) {
      var pos;
      if (e.originalEvent.touches && e.originalEvent.touches.length) {
        pos = e.originalEvent.touches[0];
      } else if (e.pageX) {
        pos = e;
      }
      if (pos) {
        return {
          x: pos.pageX,
          y: pos.pageY
        };
      }
      return null;
    };

    InteractiveList.prototype.emitEvent = function(name, target, data) {
      target.trigger("" + evtPrefix + name, data || null);
      return _(this).emit(name, [target, data || null]);
    };

    InteractiveList.prototype.bind = function() {
      var self;
      self = this;
      $('body').on('mousemove touchmove', this.entries, function(e) {
        return self.onMove(self.getTouchPos(e));
      });
      this.element.on('mousedown touchstart', this.entries, function(e) {
        return self.onStart($(this), self.getTouchPos(e));
      });
      return this.element.on('mouseup touchend', this.entries, function(e) {
        self.onEnd();
        return true;
      });
    };

    return InteractiveList;

  })();

  module.exports = InteractiveList;

}).call(this);
